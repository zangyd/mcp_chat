---
description: langchain最佳实践与开发规范
globs: 
alwaysApply: false
---
---
description:LangChain 开发最佳实践，本文档概述了开发 LangChain 应用程序的最佳实践，旨在确保代码质量、可维护性、性能、安全性以及项目整体成功。这些指南涵盖了从代码组织到测试和部署的各个开发环节。
globs:"**/*.py"
alwaysApply:true
---

# LangChain 开发最佳实践

## 1. 代码组织与结构

### 1.1 目录结构最佳实践  
采用清晰一致的目录结构以提高代码可发现性和可维护性。推荐结构如下：  

```
project_root/
├── data/                   # 原始数据、处理后的数据和数据集
├── src/                    # 源代码目录
│   ├── components/          # 可复用的 LangChain 组件（如自定义链、工具）
│   ├── chains/              # LangChain 链的定义
│   ├── agents/              # 代理实现
│   ├── memory/              # 内存实现
│   ├── utils/               # 工具函数和模块
│   ├── models/              # 自定义模型定义或包装器
│   ├── callbacks/           # 自定义回调处理器
│   ├── vectorstores/        # 向量存储配置和连接
│   ├── document_loaders/    # 自定义文档加载器
│   ├── prompts/             # 提示模板和管理
│   ├── config/              # 配置文件
│   └── main.py              # 应用程序入口点
├── tests/                  # 单元测试和集成测试
├── notebooks/              # 用于实验和文档记录的 Jupyter 笔记本
├── docs/                   # 项目文档
├── requirements.txt        # 项目依赖
├── pyproject.toml          # 项目元数据和构建配置
└── README.md               # 项目 README 文件
```

### 1.2 文件命名规范  
使用描述性且一致的文件名：  
- `module_name.py`：通用模块。  
- `component_name.py`：LangChain 组件（如 `custom_chain.py`）。  
- `test_module_name.py`：测试文件。  
- 文件名使用小写和下划线（蛇形命名法）。  

### 1.3 模块组织  
根据功能将代码组织成逻辑模块，每个模块应有明确的用途和最小依赖。  
- **内聚性**：模块内元素应高度相关。  
- **耦合性**：模块间应尽可能独立，降低耦合。  

### 1.4 组件架构  
使用基于组件的架构设计 LangChain 应用，确保组件可复用、可测试且定义清晰。  
- **链（Chains）**：将链定义为封装特定工作流的可复用组件。  
- **代理（Agents）**：将代理实现为通过工具与环境交互的模块化实体。  
- **内存（Memory）**：使用内存组件管理对话历史和状态。  
- **工具（Tools）**：将工具创建为执行